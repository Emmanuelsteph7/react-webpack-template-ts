Docs for this repo

steps
1, create the initial structure (src, .gitignore)
2, initialize git and package.json
3, add react and react-dom as dependencies
4, add typescript @types/react @types/react-dom as dev dependencies
5, initialize tsconfig.json using npx tsc --init
6, create the index.tsx, App.tsx and index.html files in the src folder
7, add the following as dev dependencies - @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript
8, add a .babelrc config file and its configuration
9, add the following as dev dependencies - webpack webpack-cli webpack-dev-server html-webpack-plugin babel-loader
10, to work with css files, add css-loader and style-loader as dev dependencies
11, add the test config to webpack for css files attaching the css and style loaders
12, when importing images, typescript gives an error: "Cannot find module './image.png' or its corresponding type declarations."
to fix this, in the src folder, create a declarations.d.ts file and add "declare module "_.png""
13, in webpack 4, to handle files, we add the file-loader package, but in webpack 5, there is in-built support for files using asset resource module type
14, add the config for images in the webpack config
15, to fix importing svgs, add "declare module "_.svg"" to the declaration.d.ts
16, in webpack 4, handling svgs required url-loader, but in webpack 5, we can use the asset inline module type
17, add the config for svgs and fonts to the config
18, create webpack.dev.js, webpack.prod.js, webpack.config.js. rename the previous webpack.config.js to webpack.common.js
19, to merge webpack files, add webpack-merge package
20, add the config values to the files
21, using create-react-app, when we change a value and save, it doesn't change the entire state to default. but currently, if we change something, it will set everything to default and refresh the app because of the webpack compilation. in dev mode, it is crucial to have the state maintained.
to handle this, we can use the react-refresh-webpack-plugin
22, yarn add -D @pmmmwh/react-refresh-webpack-plugin react-refresh
23, add the config to the webpack.dev.js file
24, add the following packages for eslint - yarn add -D eslint eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-import eslint-plugin-jsx-a11y
25, create a .eslintre.js file and add configurations to it
26, add a script in package.json for linting : "lint": "eslint --fix \"./src/\*_/_.{js,jsx,ts,tsx,json}\"". This asks eslint to fix any possible error that it can or highlight the errors in the src folders for files with the above extensions.
27, add the following for prettier - yarn add -D prettier eslint-config-prettier eslint-plugin-prettier
28, create a .prettierrc.js file and add its configurations
29, add a script in package.json for formatting : "format": "prettier --write \"./src/\*_/_.{js,jsx,ts,tsx,json,css,scss,md}\"",
30, we can ensure that files committed to git doesn't have linting or formatting errors using the following packages - yarn add -D lint-staged husky@4
31, define the lint-staged tool configuration in package.json :
"lint-staged": {
"src/**/\*.{js,jsx,ts,tsx,json}": [
"eslint --fix"
],
"src/**/\*.{js,jsx,ts,tsx,json,css,scss,md}": [
"prettier --write"
]
}
32, add husky configuration in package.json
"husky": {
"hooks": {
"pre-commit": "lint-staged"
}
}
husky aborts a commit when there are linting errors. if there are no linting errors, just formatting errors, the code will be formatted and committed
33, add the following packages - yarn add -D @babel/runtime @babel/plugin-transform-runtime. this lets us use the async-await feature in the react app. configure it in .babelrc file
34, add yarn add -D copy-webpack-plugin. add its config to the webpack.common.js file
35, add yarn add -D webpack-bundle-analyzer. this helps visualize the webpack output files and understand the sizes of files generated after build
35, add config to webpack.prod.js file
